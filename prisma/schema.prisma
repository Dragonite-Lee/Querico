// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts Account?

  recipes Recipe[]
}
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  expires_refresh Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique

  @@unique([provider, providerAccountId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  recipes Recipe[]
}

model Recipe {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  mainText String @db.String
  mainImgUrl String @db.String 
  title String @db.String
  totalHour Int
  totalCost Int
  starPoint Int
  isPublished Boolean @default(false)

  descriptions Description[]
  ingredients Ingredient[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String @db.ObjectId 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId, userId])
}

model Description {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  description String @db.String
  url String @db.String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipeId])
}

model Ingredient {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @db.String
  cost Int

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipeId])
}